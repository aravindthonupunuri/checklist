micronaut:
  application:
    name: backpack-registrychecklists-migration-consumer
  server:
    host: ${backpack-registrychecklists-migration-consumer-host:localhost}
    port: 8085
    idle-timeout: 2000ms
  http:
    client.connect-ttl: 30m
    client.pool.acquire-timeout: 2000ms
    services:
      redsky-api:
        urls:
          - "https://redsky-stage.perf.target.com"
        connect-timeout: 1500ms
        read-timeout: 1500ms
        pool:
          enabled: true
          max-connections: 1024
  metrics:
    binders:
      web:
        enabled: false # we are using our own binder via our custom micronaut-metrics lib

postgres:
  max-db-pool-size: 10
  min-db-pool-size: 5

filter:
  server:
    order:
      lists-brave-tracing-server-filter: 100
      lists-traceid-filter: 101
      list-authorization-filter: 200
      registry-channel-subchannel-filter: 400
  client:
    order:
      lists-brave-tracing-client-filter: 900
      resilience-client-filter: 800
      oauth-filter: 701
      oauth-key-filter: 700

components:
  server:
    list-authorization-filter:
      enabled: false
    sanitizing-filter:
      enabled: false
    registry-channel-subchannel-filter:
      enabled: false

msgbus:
  source: backpack-registrychecklists-stage
  dlq-source: backpackregistrychecklists-migration-dlq-stage
  kafka:
    consumer:
      enabled: true
    producer:
      enabled: true
      client-id: backpack-registrychecklists-migration-data-bus-stage-producer
    dlqconsumer:
      enabled: true
    dlqproducer:
      enabled: true
      client-id: backpack-registrychecklists-migration-dlq-stage-producer
    topic: registry-internal-data-bus-stage
    consumer-group: backpack-registrychecklists-migration-data-bus-stage-consumer
    consumer-batch-size: 100
    dlq-topic: registry-internal-data-bus-stage-dlq
    dlq-consumer-group: backpack-registrychecklists-migration-dlq-stage-consumer
    dlq-event-retry-interval-secs: 1
    dlq-max-event-retry-count: 3
    dlq-consumer-batch-size: 50

kafka-sources:
  allow:
    - migration-GRWS

kafka:
  bootstrap:
    servers: ${kafkaenv.servers}
  ssl:
    endpoint.identification.algorithm: ""# disable karka broker cert's hostname verification
    keystore:
      location: /lists-bus-keystore.jks
      password: ${kafka-secret.keystore-password}
    truststore:
      location: /client-truststore.jks
      password: ${kafka-secret.truststore-password}
      type: PKCS12
  security:
    protocol: ssl
  consumers:
    backpack-registrychecklists-migration-data-bus-stage-consumer:
      key:
        deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value:
        deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
    backpack-registrychecklists-migration-dlq-stage-consumer:
      key:
        deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value:
        deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
  producers:
    # default is a Jackson based JSON serializer for key/value
    backpack-registrychecklists-migration-data-bus-stage-producer:
      key:
        serializer: org.apache.kafka.common.serialization.StringSerializer
      value:
        serializer: com.tgt.lists.msgbus.ListsJsonSerde
      compression:
        type: zstd
      retries: 3
      retry:
        backoff:
          ms: 1000
      max:
        in:
          flight:
            requests:
              per:
                connection: 1
        block:
          ms: 2000
    backpack-registrychecklists-migration-dlq-stage-producer:
      key:
        serializer: org.apache.kafka.common.serialization.StringSerializer
      value:
        serializer: com.tgt.lists.msgbus.ListsJsonSerde
      compression:
        type: zstd
      retries: 3
      retry:
        backoff:
          ms: 1000
      max:
        in:
          flight:
            requests:
              per:
                connection: 1
        block:
          ms: 2000
